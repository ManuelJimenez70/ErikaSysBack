# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework

# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
name: Build and Release DemoBack

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  release:
    needs: build    
    runs-on: prod
    steps:  
    - name: Download a build artifact
      uses: actions/download-artifact@v3.0.0
      with:
        name: demo-app-back-build
        path: /var/www/ErikaBackSys
  build:
    runs-on: ubuntu-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    steps:
    - uses: actions/checkout@v3
    - name: Install gnome-terminal
      run: sudo apt install gnome-terminal
          
    - name: Install Docker Desktop
      run: |
           sudo apt-get update
           sudo apt-get update
           sudo apt-get install ca-certificates curl gnupg
           sudo install -m 0755 -d /etc/apt/keyrings
           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
           sudo chmod a+r /etc/apt/keyrings/docker.gpg
           echo \ "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
           "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
           sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
           sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
           sudo docker run hello-world
    #sudo apt-get install ./docker-desktop-<version>-<arch>.deb
            
           
    - name: Launch Docker Desktop
      run: echo #systemctl --user start docker
      
    - name: Build the App Image From Source Code
      run: |
            git clone https://github.com/paketo-buildpacks/samples \
            && cd samples/dotnet-core/aspnet
            
    - name: Install CLI
      run: | 
            sudo add-apt-repository ppa:cncf-buildpacks/pack-cli
            sudo apt-get update
            sudo apt-get install pack-cli
    - name: Run the app image with Docker
      run: docker run -d -p 8080:8080 -e PORT=8080 paketo-demo-app
      
    #Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.401
        
    - name: Restore Dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build -c Release --no-restore

    - name: Publish
      run: dotnet publish -c Release -o app/build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: demo-app-back-build
        path: app/build
        
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    #- name: Setup MSBuild.exe
     # uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    #- name: Execute unit tests
     # run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    #- name: Restore the application
     # run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      #env:
       # Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    #- name: Decode the pfx
     # run: |
      #  $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
       # $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        #[IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
   # - name: Create the app package
    #  run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
     # env:
      #  Appx_Bundle: Always
       # Appx_Bundle_Platforms: x86|x64
        #Appx_Package_Build_Mode: StoreUpload
        #Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    #- name: Remove the pfx
     # run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact

        

      


  
